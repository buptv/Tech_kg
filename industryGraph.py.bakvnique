import os
from json import dumps
from flask import Flask, g, Response, request
from neo4j.v1 import GraphDatabase, basic_auth
driver = GraphDatabase.driver('bolt://localhost',auth=basic_auth("neo4j", "vnique"))
def get_db():
    if not hasattr(g, 'neo4j_db'):
        g.neo4j_db = driver.session()
    return g.neo4j_db
app = Flask(__name__, static_url_path='/static/')
@app.teardown_appcontext
def close_db(error):
    if hasattr(g, 'neo4j_db'):
        g.neo4j_db.close()
@app.route('/')
def hello_world():
    return app.send_static_file('index.html')

@app.route('/test')
def test():
    db = get_db()
    results = db.run("MATCH (industry:产业) RETURN industry")
    print(type(results))
    for result in results:
        print(result)
    return "ok"

def serialize_node(node):
    return {
        'id': node.id,
        'label': list(node.labels)[0],
        'father': node['father'],
        'name': node['name']
    }

def serialize_rel(rel):
    return {
        'id': rel.id,
        'start': rel.start,
        'end': rel.end,
        'type': rel.type,
        'name': rel['name']
    }

#查看图谱
@app.route("/graph/<limit>",methods=['GET', 'POST'])
def get_graph(limit):
    db = get_db()
    results = db.run("MATCH (n)-[r]-() RETURN n,r "
             "LIMIT {limit}", {"limit": int(limit)})
    nodes = []
    rels = []
    i = 0
    for record in results:
        node = record["n"]
        rel = record["r"]
        print(node)
        print(rel)
        nodes.append(node)
        rels.append(rel)
    print(len(nodes))
    print(len(rels))
    nodes = list(set(nodes))
    rels = list(set(rels))
    print(len(nodes))
    print(len(rels))
    res = Response(dumps({"nodes": [serialize_node(node) for node in nodes], "links": [serialize_rel(rel) for rel in rels]}),mimetype="application/json")
    res.headers['Access-Control-Allow-Origin'] = '*'
    return res

#添加叶子节点
@app.route("/add_node",methods=['GET', 'POST'])
def add_node():
    if request.method == 'POST':
        father = request.form['father'].strip()
        name = request.form['name'].strip()
        label = request.form['label'].strip()
        r_type = request.form['r_type'].strip()
        r_name = request.form['r_name'].strip()
        db = get_db()
        cypher = "match (father) where ID(father)=%s create (son:%s{father:%s,name:'%s'}) create (father)-[:%s{name:'%s'}]->(son)" % (father,label,father,name,r_type,r_name)
        print(cypher)
        results = db.run(cypher)
        print(results)
        return "add_node ok"
    else:
        return "请使用POST请求"

#删除节点
@app.route("/del_node",methods=['GET', 'POST'])
def del_node():
    if request.method == 'POST':
        id = request.form['id'].strip()
        db = get_db()
        cypher = "MATCH (n)-[r]-() where ID(n)=%s delete n,r" % id
        print(cypher)
        results = db.run(cypher)
        print(results)
        return "del_node ok"
    else:
        return "请使用POST请求"

#修改节点属性
@app.route("/mod_node",methods=['GET', 'POST'])
def mod_node():
    if request.method == 'POST':
        id = request.form['id'].strip()
        name = request.form['name'].strip()
        db = get_db()
        cypher = "match (from) where ID(from)=%s set from.name='%s'" % (id,name)
        print(cypher)
        results = db.run(cypher)
        print(results)
        return "mod_node ok"
    else:
        return "请使用POST请求"

#添加关系
@app.route("/add_rel",methods=['GET', 'POST'])
def add_rel():
    if request.method == 'POST':
        father = request.form['father'].strip()
        son = request.form['son'].strip()
        r_type = request.form['r_type'].strip()
        r_name = request.form['r_name'].strip()
        db = get_db()
        #cypher = "match (from),(to) where ID(from)=%s and ID(to)=%s create (from)-[:%s{name:'%s'}]->(to)" % (father,son,r_type,r_name)
        cypher = "match (from),(to) where ID(from)=%s and ID(to)=%s create (from)-[:%s{name:'%s'}]->(to)" % (father,son,r_type,r_name)
        print(cypher)
        results = db.run(cypher)
        print(results)
        return "add_rel ok"
    else:
        return "请使用POST请求"

#删除关系
@app.route("/del_rel",methods={'POST','GET'})
def del_rel():
    if request.method == 'POST':
        father = request.values.get('father').strip()
        son = request.values.get('son').strip()
        r_type = request.values.get('r_type').strip()
        r_name = request.values.get('r_name').strip()
        db = get_db()
        cypher = "match (from)-[r:%s{name:'%s'}]->(to) where ID(from)=%s and ID(to)=%s delete r" % (r_type,r_name,father,son)
        print(cypher)
        results = db.run(cypher)
        print(results)
        return "del_rel ok"
    else:
        return "请使用POST请求"

#修改关系属性
@app.route("/mod_rel",methods={'POST','GET'})
def mod_rel():
    if request.method == 'POST':
        father = request.values.get('father').strip()
        son = request.values.get('son').strip()
        r_type = request.values.get('r_type').strip()
        r_name = request.values.get('r_name').strip()
        new_name = request.values.get('new_name').strip()
        db = get_db()
        cypher = "match (from)-[r:%s{name:'%s'}]->(to) where ID(from)=%s and ID(to)=%s set r.name='%s'" % (r_type,r_name,father,son,new_name)
        print(cypher)
        results = db.run(cypher)
        print(results)
        return "mod_rel ok"
    else:
        return "请使用POST请求"



if __name__ == '__main__':
    app.run('0.0.0.0')
